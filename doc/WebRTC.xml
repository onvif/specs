<?xml version="1.0"?>
<?xml-stylesheet href="docbook.xsl" type="text/xsl" ?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="book_rxt_v12_v5b">
  <info>
    <title>WebRTC Specification</title>
    <titleabbrev>WebRTC</titleabbrev>
    <releaseinfo>23.06</releaseinfo>
    <author>
      <orgname>ONVIF™</orgname>
      <uri>www.onvif.org</uri>
    </author>
    <pubdate> June, 2023</pubdate>
    <mediaobject>
      <imageobject>
        <imagedata fileref="media/logo.png" contentwidth="60mm"/>
      </imageobject>
    </mediaobject>
    <copyright>
      <year>2008-2023</year>
      <holder>ONVIF™ All rights reserved.</holder>
    </copyright>
    <legalnotice>
      <para>Recipients of this document may copy, distribute, publish, or display this document so
        long as this copyright notice, license and disclaimer are retained with all copies of the
        document. No license is granted to modify this document.</para>
      <para>THIS DOCUMENT IS PROVIDED "AS IS," AND THE CORPORATION AND ITS MEMBERS AND THEIR
        AFFILIATES, MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT
        LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
        NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THIS DOCUMENT ARE SUITABLE FOR ANY PURPOSE;
        OR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS,
        TRADEMARKS OR OTHER RIGHTS.</para>
      <para>IN NO EVENT WILL THE CORPORATION OR ITS MEMBERS OR THEIR AFFILIATES BE LIABLE FOR ANY
        DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES, ARISING OUT OF OR
        RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT, WHETHER OR NOT (1) THE CORPORATION,
        MEMBERS OR THEIR AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, OR (2)
        SUCH DAMAGES WERE REASONABLY FORESEEABLE, AND ARISING OUT OF OR RELATING TO ANY USE OR
        DISTRIBUTION OF THIS DOCUMENT. THE FOREGOING DISCLAIMER AND LIMITATION ON LIABILITY DO NOT
        APPLY TO, INVALIDATE, OR LIMIT REPRESENTATIONS AND WARRANTIES MADE BY THE MEMBERS AND THEIR
        RESPECTIVE AFFILIATES TO THE CORPORATION AND OTHER MEMBERS IN CERTAIN WRITTEN POLICIES OF
        THE CORPORATION.</para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>23.06</revnumber>
        <date>Dec 2022</date>
        <author>
          <personname>Fredrik Svensson, Jonas Cremon, Karin Hedlund</personname>
        </author>
        <revremark>First release</revremark>
      </revision>
    </revhistory>
  </info>
  <chapter xml:id="chapter_txt_v12_v5b">
    <title>Scope </title>
    <para>This document defines how WebRTC and related protocols are to be used for ONVIF clients
      and devices to establish a peer-to-peer connection between a client and a device using a
      signaling server.</para>
  </chapter>
  <chapter xml:id="chapter_uxt_v12_v5b">
    <title>Normative references</title>
    <para>W3C WebRTC Specification: Real-Time Communication Between Browsers</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://www.w3.org/TR/webrtc/"/>&gt;</para>
    <para>IETF RFC 6455 - The WebSocket Protocol</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="http://tools.ietf.org/html/rfc6455"/>&gt;</para>
    <para>IETF RFC 8829 - JavaScript Session Establishment Protocol (JSEP)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="http://tools.ietf.org/html/rfc8829"/>&gt;</para>
    <para>IETF RFC 5245 - Interactive Connectivity Establishment (ICE)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="http://tools.ietf.org/html/rfc5245"/>&gt;</para>
    <para>IETF RFC 8866 - SDP: Session Description Protocol</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="http://tools.ietf.org/html/rfc8866"/>&gt;</para>
    <para>IETF RFC 8489 - Session Traversal Utilities for NAT (STUN)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="http://tools.ietf.org/html/rfc8489"/>&gt;</para>
    <para>IETF RFC 8656 - Traversal Using Relays around NAT (TURN)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="http://tools.ietf.org/html/rfc8856"/>&gt;</para>
    <para>IETF RFC 7519 - JSON Web Token (JWT)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="http://tools.ietf.org/html/rfc7519"/>&gt;</para>
    <para>IETF RFC 6749 - The OAuth 2.0 Authorization Framework</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="http://tools.ietf.org/html/rfc6749"/>&gt;</para>
    <para>OpenID Connect Core</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="https://openid.net/specs/openid-connect-core-1_0.html"/>&gt;</para>
    <para>ONVIF Security Service Specification</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="https://www.onvif.org/specs/srv/security/ONVIF-Security-Service-Spec.pdf"/>&gt;</para>
  </chapter>
  <chapter xml:id="chapter_vxt_v12_v5b">
    <title>Terms and Definitions</title>
    <section xml:id="section_wxt_v12_v5b">
      <title>Definitions</title>
      <informaltable>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="1*"/>
          <colspec colname="c2" colwidth="2.45*"/>
          <tbody valign="top">
            <row>
              <entry align="left">
                <para>
                  <emphasis role="bold">Signaling Server</emphasis>
                </para>
              </entry>
              <entry align="left">
                <para>A server that manages the WebRTC connections between clients and
                  devices.</para>
              </entry>
            </row>
            <row>
              <entry align="left">
                <para>
                  <emphasis role="bold">Signaling ID</emphasis>
                </para>
              </entry>
              <entry>A peer's assigned ID provided by the signaling server in the <emphasis
                  role="bold">hello</emphasis> message sent to a peer after it has connected a
                WebSocket to the server.</entry>
            </row>
            <row>
              <entry align="left">
                <para>
                  <emphasis role="bold">client-facing</emphasis>
                </para>
              </entry>
              <entry align="left">
                <para>Messages that are sent between the Signaling Server and clients in either
                  direction.</para>
              </entry>
            </row>
            <row>
              <entry align="left">
                <para>
                  <emphasis role="bold">device-facing</emphasis>
                </para>
              </entry>
              <entry align="left">Messages that are sent between the Signaling Server and devices in
                either direction.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section xml:id="section_xxt_v12_v5b">
      <title>Abbreviations</title>
      <informaltable>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="24*"/>
          <colspec colname="c2" colwidth="76*"/>
          <tbody valign="top">
            <row>
              <entry valign="middle">
                <para>ICE</para>
              </entry>
              <entry valign="middle">
                <para>Interactive Connectivity Establishment</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>NAT</para>
              </entry>
              <entry valign="middle">
                <para>Network Address Translation</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>P2P</para>
              </entry>
              <entry valign="middle">
                <para>Peer-to-peer</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>SDP</para>
              </entry>
              <entry valign="middle">
                <para>Session Description Protocol</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>STUN</para>
              </entry>
              <entry valign="middle">
                <para>Session Traversal Utilities for NAT</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>TURN</para>
              </entry>
              <entry valign="middle">
                <para>Traversal Using Relays around NAT</para>
              </entry>
            </row>
            <row>
              <entry valign="middle">
                <para>WebRTC</para>
              </entry>
              <entry valign="middle">
                <para>Web Real-Time Communication</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </chapter>
  <chapter xml:id="chapter_yxt_v12_v5b">
    <title>Overview</title>
    <para>The WebRTC standard includes APIs for communicating with an ICE Server, but the signaling
      component is not part of it. Signaling is needed in order for two peers to share how they
      should connect.</para>
    <para>Signaling can be implemented in many different ways, and the WebRTC standard doesn't
      prefer any specific solution.</para>
    <para>This specification contains documentation and examples of the signaling protocol used in
      ONVIF to set up a WebRTC peer-to-peer connection. The setup involves three participants:
        <emphasis role="italic">client</emphasis>, <emphasis role="italic">device</emphasis> and
        <emphasis role="italic">signaling server</emphasis>.</para>
    <figure xml:id="_Ref493258796">
      <title>Client, device, signaling server</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="media/WebRTC/client_device_server_triangle.svg"
            contentwidth="120mm"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>In this figure,<itemizedlist>
        <listitem>
          <para>The <emphasis role="italic">client</emphasis> represents a real user who initiates
            the WebRTC session.</para>
        </listitem>
        <listitem>
          <para>The <emphasis role="italic">device</emphasis> is the resource delivering the media,
            for example a camera.</para>
        </listitem>
        <listitem>
          <para>The <emphasis role="italic">signaling server</emphasis> is the mediator that both
              <emphasis role="italic">client</emphasis> and <emphasis role="italic"
              >device</emphasis> connect to in order to establish a peer-to-peer connection between
            them.</para>
        </listitem>
      </itemizedlist></para>
    <para>The <emphasis>Signaling Protocol</emphasis> described in this specification details the
      data exchange between client and device via the signaling server. The formal API is defined in
      a separate AsyncAPI schema file.</para>
    <para>Once a peer-to-peer connection has been established, how WebRTC is used is described in the
      WebRTC usage chapter.</para>
  </chapter>
  <chapter xml:id="chapter_zxt_v12_v5b">
    <title>Signaling Protocol</title>
    <para>The <emphasis role="italic">Signaling Protocol</emphasis> defines the messages between a
        <emphasis role="italic">client</emphasis> and a <emphasis role="italic">device</emphasis> in
      a WebRTC system with the intension of esatblishing a peer-to-peer connection between the
      client and a device. The messages are always sent via the <emphasis>signaling
        server</emphasis> called <emphasis>server</emphasis> from now on. Once a peer-to-peer
      connection has been established the connection with the server can be dropped without
      affecting the peer-to-peer connection. It's however recommended to keep the server connection
      open to be able receive error messages from the server.</para>
    <para>Since the headers of the messages differ depending on whether the message is sent between
      client and server, or between device and server, we specify two separate versions of the
      interface. One between client and server, called <emphasis>client-facing</emphasis> from now
      on, and one between device and server, called <emphasis>device-facing</emphasis> from now
      on.</para>
    <figure xml:id="_Ref493258797">
      <title>Signaling flow sequence diagram</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="media/WebRTC/webrtc_signaling_flow.svg" contentwidth="160mm"/>
        </imageobject>
      </mediaobject>
    </figure>
    <section xml:id="section_ayt_v12_v5b">
      <title>Connecting to the signaling server</title>
      <para>Both a client and a device need to connect to the server by setting up a WebSocket with
        valid access tokens that the server will accept. The connection handling is done using
        WebSocket [RFC 6455].</para>
      <para>The signaling messages are then sent as JSON text messages in the WebSocket. Please
        refer to the Signaling Protocol AsyncAPI schema for specific details regarding the Signaling
        Protocol.</para>
      <section xml:id="section_hsq_qhn_rwb">
        <title>Client</title>
        <para>A client connects to the server by setting up a WebSocket to, for example:
          <programlisting>wss://signaling.example.com/client?authorization=Bearer%20access_token</programlisting></para>
        <para>Where <code>signaling.example.com</code> should be replaced with the server's address,
          and <code>access_token</code> should be replaced with a valid access token that the server
          will accept. See section <xref linkend="chapter_cwp_r2k_v5b"/> for how to get an access
          token.</para>
        <para>The WebSocket sub protocol shall be set to 'client.webrtc.onvif.org' for the
          client.</para>
      </section>
      <section xml:id="section_isq_qhn_rwb">
        <title>Device</title>
        <para>A device must first be onboarded in order to be able to set up a WebSocket to the
          server. See section <xref linkend="section_nsq_qhn_rwb"/> for more information. An
          onboarded device then connects by setting up a WebSocket to, for example:</para>
        <programlisting>wss://signaling.example.com/device?deviceId=myDeviceId&amp;orgId=myOrgId&amp;token=myToken</programlisting>
        <para>Where <code>signaling.example.com</code> should be replaced with the server's address
          and the <code>deviceId</code> and <code>orgId</code> (decided when onboarding) are used as
          query strings when connecting. An access token needs to be provided (<code>token</code>).
          See section <xref linkend="section_dwp_r2k_v5b"/> for information about how a device gets
          an access token.</para>
        <para>The WebSocket sub protocol shall be set to 'device.webrtc.onvif.org' for the
          device.</para>
      </section>
      <section xml:id="section_zdt_ypd_svb">
        <title>hello</title>
        <para>Directly after connecting a WebSocket to the server the client or device gets a hello
          message from the server, with the peer's assigned Signaling ID.</para>
      </section>
    </section>
    <section xml:id="section_byt_v12_v5b">
      <title>Message structure</title>
      <para>Generally a message contains two parts: header and payload. The header part is processed
        by the server and the payload part is intended for the peer (device or client).</para>
      <para>Since message header content differs depending on whether the message is client- or
        device-facing, the header keys are grouped accordingly while the payload keys are not. The
        payload keys remain the same, regardless of peer.</para>
      <para><emphasis role="bold">NOTE</emphasis>: Messages sent via the server may be delivered
        out-of-order; for optimal scalability messages should be handled asynchronously.</para>
      <para>Below are explanations of key/value pairs that are used in the protocol.</para>
      <section xml:id="section_jsq_qhn_rwb">
        <title>Header keys</title>
        <section xml:id="section_cyt_v12_v5b">
          <title>General header keys</title>
          <para>The following key/value pairs are used in the header of both client- and
            device-facing messages.</para>
          <para>
            <informaltable>
              <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="1*"/>
                <colspec colnum="2" colname="c2" colwidth="3.55*"/>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis role="bold">Key</emphasis></para>
                    </entry>
                    <entry>
                      <para><emphasis role="bold">Description</emphasis></para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>type</para>
                    </entry>
                    <entry>
                      <para>Can be "initSession", "signaling" or "error"</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </section>
        <section xml:id="section_ksq_qhn_rwb">
          <title>Client-facing header keys</title>
          <para>The following key/value pairs are used in the header part in client messages.</para>
          <para>
            <informaltable>
              <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="1*"/>
                <colspec colnum="2" colname="c2" colwidth="3.55*"/>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis role="bold">Key</emphasis></para>
                    </entry>
                    <entry>
                      <para><emphasis role="bold">Description</emphasis></para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>deviceId</para>
                    </entry>
                    <entry>
                      <para>The Signaling ID of the device to which the message is intended, or the
                        device that sent the message. This ID is unique within the organization. See
                        section <xref linkend="chapter_ryt_v12_v5b"/> for how to get available
                        IDs.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>orgId</para>
                    </entry>
                    <entry>
                      <para>The ID of the organization that the device belongs to. This ID is unique
                        within the signaling server. See section <xref linkend="chapter_ryt_v12_v5b"
                        /> for how to get available IDs.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>accessToken</para>
                    </entry>
                    <entry>
                      <para>Access token for the logged in user. This should be in JWT format
                        according to [RFC 7519]. See section <xref linkend="chapter_cwp_r2k_v5b"/>
                        for how to get an access token. The token is checked by the peer for every
                        command. If it has expiried it sends an unauthorized error and the client
                        must retry with an updated token.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>correlationId</para>
                    </entry>
                    <entry>
                      <para>An optional identifier chosen by the client that can be used to
                        correlate the response from the signaling server with the request. Echoed
                        back in the signaling server response.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </section>
        <section xml:id="section_lsq_qhn_rwb">
          <title>Device-facing header keys</title>
          <para>The following key/value pairs are used in the header part in device messages.</para>
          <informaltable>
            <tgroup cols="2">
              <colspec colnum="1" colname="c1" colwidth="1*"/>
              <colspec colnum="2" colname="c2" colwidth="3.55*"/>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role="bold">Key</emphasis></para>
                  </entry>
                  <entry>
                    <para><emphasis role="bold">Description</emphasis></para>
                  </entry>
                </row>
                <row>
                  <entry>clientId</entry>
                  <entry>The Signaling ID of the client to which the message is intended, or the
                    client that sent the message. This ID is unique within the organization and the
                    device gets this id from server during initSession.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>
      <section xml:id="section_ozx_512_v5b">
        <title>Payload keys</title>
        <para>The following key/value pairs are used in the payload part of messages.</para>
        <para>
          <informaltable>
            <tgroup cols="2">
              <colspec colnum="1" colname="c1" colwidth="1*"/>
              <colspec colnum="2" colname="c2" colwidth="3.76*"/>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role="bold">Key</emphasis></para>
                  </entry>
                  <entry>
                    <para><emphasis role="bold">Description</emphasis></para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>apiVersion</para>
                  </entry>
                  <entry>
                    <para>The API version that should be used in the request.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>type</para>
                  </entry>
                  <entry>Specifies whether this message is a request or response.</entry>
                </row>
                <row>
                  <entry>
                    <para>sessionId</para>
                  </entry>
                  <entry>An identifier chosen by the client that should be used for all subsequent
                    messages belonging to this session to and from the device.</entry>
                </row>
                <row>
                  <entry>
                    <para>method</para>
                  </entry>
                  <entry>Specifies which request method this message concerns.</entry>
                </row>
                <row>
                  <entry>
                    <para>params</para>
                  </entry>
                  <entry>
                    <para>Parameters related to the method</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>context</para>
                  </entry>
                  <entry>An optional identifier chosen by the requestor that can be used to
                    correlate the response from the receiver with the request. Echoed back in the
                    response.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </para>
      </section>
      <section xml:id="section_dyt_v12_v5b">
        <title>Param level keys inside params blocks</title>
        <para>The following key/value pairs are used inside <code>params</code> blocks in the
          payload part of messages.</para>
        <para>
          <informaltable>
            <tgroup cols="2">
              <colspec colnum="1" colname="c1" colwidth="1*"/>
              <colspec colnum="2" colname="c2" colwidth="4*"/>
              <tbody>
                <row>
                  <entry>
                    <para><emphasis role="bold">Key</emphasis></para>
                  </entry>
                  <entry>
                    <para><emphasis role="bold">Description</emphasis></para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>type</para>
                  </entry>
                  <entry>
                    <para>Sub function of the method. Can be "offer" or "answer".</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>profile</para>
                  </entry>
                  <entry>
                    <para>The media profile to use for this session. If none is specified the device
                      will choose a default profile. See section <xref linkend="chapter_ryt_v12_v5b"
                      /> for how to get available profiles.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>sdp</para>
                  </entry>
                  <entry>
                    <para>An SDP record as described in RFC 8829.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>candidate</para>
                  </entry>
                  <entry>
                    <para>An SDP ICE candidate formatted according to RFC8839, section 5.1.</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </para>
      </section>
      <section>
        <title>Message acknowledging</title>
        <para>Client and devices may acknowledge messages other than the initial hello message using
          the appropriate headers defined above. The payload shall be either empty or signals one of
          the errors defined in <xref linkend="section_myt_v12_v5b"/>.</para>
        <para>The signaling server shall forward acknowledge messages to the peer.</para>
      </section>
    </section>
    <section xml:id="section_eyt_v12_v5b">
      <title>Initialize a new WebRTC session</title>
      <para>A new WebRTC session is initiated by the client requesting the device to produce an SDP
        offer using an <code>initSession</code> message.</para>
      <section xml:id="section_fyt_v12_v5b">
        <title>initSession</title>
        <para>An <code>initSession</code> message is sent from the client to the signaling server to
          request a new WebRTC session to a device. A message of type <code>live</code> should be
          used to request a live video and/or audio session.</para>
        <para>The server responds to the client with a copy of the <code>initSession</code> message,
          including details for the STUN and TURN servers that can be used.</para>
        <para>The server also sends a copy of the message, with updated headers, to the
          device.</para>
        <para>The device acknowledges that it has received the <code>initSession</code>
          message.</para>
      </section>
      <section xml:id="section_a2t_ypd_svb">
        <title>Faults</title>
        <para>The following errors can be set in the <code>initSession</code> messages: 1100, 1101,
          2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110. See section <xref
            linkend="section_myt_v12_v5b"/> for more details on errors.</para>
      </section>
    </section>
    <section xml:id="section_gyt_v12_v5b">
      <title>SDP record exchange</title>
      <para>Once a P2P signaling channel has been set up using the <code>initSession</code> message
        the next step is to exchange SDP records. The dynamics and the format of the SDP records are
        defined in RFC 8829.</para>
      <section xml:id="section_hyt_v12_v5b">
        <title>setSdpOffer</title>
        <para>A <code>setSdpOffer</code> message is always sent from the device, via server, to the
          client.</para>
        <para>The client may acknowledge the received SDP offer with a response after validating the
          message. Although this is not strictly necessary it can be helpful to send these
          acknowledgements to ease debugging the signaling flow. </para>
      </section>
      <section xml:id="section_iyt_v12_v5b">
        <title>setSdpAnswer</title>
        <para>A <code>setSdpAnswer</code> message is always sent from the client, via server, to the
          device.</para>
        <para>A device shall respond send an ACK response back to the client (via server) after
          validating the message. This message indicates that the device has successfully validated
          the <code>setSdpAnswer</code> request.</para>
      </section>
        <section xml:id="section_b2t_ypd_svb">
        <title>Faults</title>
        <para>The following errors can be set in the responses to the <code>setSdpOffer</code> or
            <code>setSdpAnswer</code> messages: 1100, 1101, 2100, 2101, 2102, 2103, 2104, 2105,
          2106, 2107, 2108, 2109, 2110. See section <xref linkend="section_myt_v12_v5b"/> for more
          details on errors.</para>
      </section>
    </section>
    <section xml:id="section_c2t_ypd_svb">
      <title>ICE candidate exchange</title>
      <para>Next step is to exchange ICE candidates. The format of the ICE candidate strings are
        defined in RFC 8829.</para>
      <section xml:id="section_jyt_v12_v5b">
        <title>addIceCandidate</title>
        <para>Both client and device produce ICE candidates and send them to each other, via the
          server, in any order, using an <code>addIceCandidate</code> message.</para>
        <para><emphasis role="bold">NOTE</emphasis>: Note that ICE candidates can arrive <emphasis
            role="bold">before</emphasis> the SDP offer and the implementing client needs to handle
          this.</para>
        <para>If everything works as it should, a peer-to-peer WebRTC session can be set up between
          client and device. After the session has been established the client can terminate the
          WebSocket session to the signaling server and the peer-to-peer connection will not be
          affected. However, it's recommended to keep the WebSocket session to the server open to be
          able to receive event messages from the signaling server.</para>
      </section>
      <section xml:id="section_d2t_ypd_svb">
        <title>Faults</title>
        <para>The following errors can be set in the response to the <code>addIceCandidate</code>
          message: 1100, 1101, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110. See
          section <xref linkend="section_myt_v12_v5b"/> for more details on errors.</para>
      </section>
    </section>
    <section xml:id="section_myt_v12_v5b">
      <title>Error handling</title>
      <para>Errors that can be immediately reported when receiving a request are reported directly
        in its corresponding response. However, errors may also occur later during the subsequent
        session setup or after it has been setup and is running. These types of errors are reported
        in an <code>event</code> message. Both 'events' and 'responses' include a numeric error
        code, and a human-readable message. When errors are reported by the client or device the
          <code>error</code> message is encapsulated in a <code>signaling</code> message. The server
        may itself send errors by using its own <code>error</code> type message.</para>
    <section xml:id="section_prn_3dj_3vb">
      <title>Client and device error codes</title>
      <informaltable>
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1*"/>
          <colspec colnum="2" colname="col2" colwidth="4*"/>
          <thead>
            <row>
              <entry>
                <para>Code</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>1100</para>
              </entry>
              <entry>
                <para>Internal error</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1101</para>
              </entry>
              <entry>
                <para>Temporarily unavailable</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1200</para>
              </entry>
              <entry>
                <para>Media streaming failed, audio from client to device</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1201</para>
              </entry>
              <entry>
                <para>Media streaming failed, connection to upstream source lost</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2100</para>
              </entry>
              <entry>
                <para>API version not supported</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2101</para>
              </entry>
              <entry>
                <para>Invalid JSON</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2102</para>
              </entry>
              <entry>
                <para>Method not supported</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2103</para>
              </entry>
              <entry>
                <para>Required parameter missing</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2104</para>
              </entry>
              <entry>
                <para>Invalid parameter value specified</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2105</para>
              </entry>
              <entry>
                <para>Authorization failed</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>2106</para>
              </entry>
              <entry>
                <para>Authentication failed</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
      <section xml:id="section_nyt_v12_v5b">
        <title>Server error codes</title>
        <informaltable>
          <tgroup cols="2">
            <colspec colnum="1" colname="col1" colwidth="1*"/>
            <colspec colnum="2" colname="col2" colwidth="4*"/>
            <thead>
              <row>
                <entry>
                  <para>Code</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>2105</para>
                </entry>
                <entry>
                  <para>Authorization failed</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>2107</para>
                </entry>
                <entry>
                  <para>The access token has expired</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>2108</para>
                </entry>
                <entry>
                  <para>Device disconnected. Client tries to send a message to a device that is not
                    available to receive the message.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>2109</para>
                </entry>
                <entry>
                  <para>Client sends a message to a device that has signaling disabled</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>2110</para>
                </entry>
                <entry>Other error</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
      </section>
    <section xml:id="section_fks_5rk_v5b">
      <title>Reconnecting</title>
      <para>If the session is disconnected it's up to the client to reconnect again using the same
        procedure as was used initially, i.e. start from scratch. Each client should use an
        individual ascending interval strategy to avoid that all clients reconnect at the same
        time.</para>
    </section>
  </chapter>
  <chapter xml:id="chapter_uyt_v12_v5b">
    <title>WebRTC Usage</title>
    <para>This chapter describes ONVIF specific usage of WebRTC regarding how to send data between
      the client and device on the peer-to-peer connection.</para>
    <para>Devices MAY define profiles for different streaming scenarios that can be choosen by the
      client based on the available bandwidth or other limiting factors. For example, a specific
      profile for mobile clients, another one for high quality streaming, etc.</para>
    <section xml:id="section_vyt_v12_v5b">
      <title>Video</title>
      <para>When using WebRTC with a web browser only certain codecs will work. Because of this
        ONVIF recommends to use the h.264 codec.</para>
      <para>In line with WebRTC standard, ONVIF also recommends to always use congestion control to
        ensure that WebRTC cannot be used to flood the network.</para>
    </section>
    <section xml:id="section_wyt_v12_v5b">
      <title>Audio</title>
      <para>When using WebRTC with a web browser only certain codecs will work. Because of this
        ONVIF recommends to use the Opus or PCMU codec.</para>
      <para>For two-way audio it's recommended to use echo cancellation to avoid feedback
        loops.</para>
    </section>
    <section xml:id="section_xyt_v12_v5b">
      <title>Metadata</title>
      <para>A device could send event and analytics metadata on a WebRTC datachannel. This is not
        covered in this version of this specifcation but may be added in future versions.</para>
    </section>
    <section xml:id="section_yyt_v12_v5b">
      <title>Commands</title>
      <para>A client could send PTZ and other commands on a WebRTC datachannel. This is not covered
        in the this version of this specifcation but may be added in future versions.</para>
    </section>
  </chapter>
  <chapter xml:id="chapter_ryt_v12_v5b">
    <title>Directory Protocol</title>
    <para>The Directory Protocol is used to query organizations, devices and profiles in a
      directory. This is out-of-scope for this release of the specification. The client has to find
      out in a proprietary way what devices that it can connect to and what profiles that are
      available for those devices.</para>
  </chapter>
  <chapter xml:id="chapter_cwp_r2k_v5b">
    <title>Authentication Protocol</title>
    <para>This section describes how users and devices autheticates and get access to
      services.</para>
    <section xml:id="section_msq_qhn_rwb">
      <title>User login and access</title>
      <para>A user logs in and gets an access token using OAuth2 and OpenID Connect. This is
        described in the [ONVIF Security Service Specification].</para>
    </section>
    <section xml:id="section_dwp_r2k_v5b">
      <title>Device access</title>
      <para>In order for a device to connect to a signaling server an Authorization Server
        Configuration must have been set up during device onboarding. See the [ONVIF Security
        Service] regarding Authorization Server Configurations. This configuration tells the device
        how to get an access token that can be used to connect to the signaling server. Typically a
        configuration is created that allows the device to use OAuth2 Client Credentials Grant flow
        using <code>private_key_jwt</code> as client authentication method as described in [OpenID
        Connect Core]. In case <code>private_key_jwt</code> is used, the JWT contains these
        claims:</para>
      <table>
        <title>JWT claims when using <code>private_key_jwt</code> (informative)</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="20*"/>
          <colspec colname="c2" colnum="2" colwidth="80*"/>
          <thead>
            <row>
              <entry>
                <para>Claim</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>iss</para>
              </entry>
              <entry>
                <para>client_id, an id that uniqely identifies the device, e.g.
                  orgId/deviceId</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>sub</para>
              </entry>
              <entry>
                <para>client_id, an id that uniqely identifies the device, e.g.
                  orgId/deviceId</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>aud</para>
              </entry>
              <entry>
                <para>Authorization server URI</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>jti</para>
              </entry>
              <entry>
                <para>Random nonce</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>exp</para>
              </entry>
              <entry>
                <para>Expiration time</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>iat (optional)</para>
              </entry>
              <entry>
                <para>Issuance time</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>NOTE: This is one way for a device to authenticate. Other setups are possible depending
        on the specific Authorization Server and Signaling Server configurations.</para>
      <section xml:id="section_nsq_qhn_rwb">
        <title>What needs to be provisioned during onboarding</title>
        <para>In order for a device to be able to function in a WebRTC system the following things
          needs to be provisioned during device onboarding:</para>
        <itemizedlist>
          <listitem>
            <para>Authorization Server Configuration</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para>ServerUri: Authorization Server URI (token endpoint)</para>
                </listitem>
                <listitem>
                  <para>ClientId: client_id, e.g. orgId/deviceId</para>
                </listitem>
                <listitem>
                  <para>ClientSecret: Key ID of the private signing key</para>
                </listitem>
                <listitem>
                  <para>Scope: optional depending on Authorization Server</para>
                </listitem>
                <listitem>
                  <para>Type: OAuthClientCredentials</para>
                </listitem>
                <listitem>
                  <para>ClientAuth: private_key_jwt</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>Signaling Server URI: The URI where the device should connect to</para>
          </listitem>
          <listitem>
            <para>Any CA certs that are needed to connect to the Authorization Server and Signaling
              server</para>
          </listitem>
          <listitem>
            <para>orgId: The id of the organization that the device belongs to</para>
          </listitem>
          <listitem>
            <para>deviceId: The device's unique id within the organization</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </chapter>
  <appendix role="revhistory">
    <title>Revision History</title>
    <para/>
  </appendix>
</book>
